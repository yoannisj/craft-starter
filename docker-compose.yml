# @see https://docs.docker.com/compose/compose-file/compose-file-v3/
# @see https://github.com/krallin/tini/issues/8
version: '3.7'
services:
  httpd:
    image: yoannisj/craft-nginx:${NGINX_VERSION:-1.19}
    build:
      dockerfile: ./services/httpd/nginx/Dockerfile
      context: .
      args: # expose environment variables as build arguments
        - ENVIRONMENT
        - NGINX_VERSION=${NGINX_VERSION:-1.19}
        - NGINX_ENVSUBST_TEMPLATE_SUFFIX=${NGINX_ENVSUBST_TEMPLATE_SUFFIX:-.template}
        - NGINX_ENVSUBST_TEMPLATE_DIR=${NGINX_ENVSUBST_TEMPLATE_DIR:-/etc/nginx/templates}
        - LOCAL_SSL_KEY_FILE=${LOCAL_SSL_KEY_FILE:-./services/httpd/ssl/localhost.selfsigned-private.key}
        - LOCAL_SSL_CERT_FILE=${LOCAL_SSL_CERT_FILE:-./services/httpd/ssl/localhost.selfsigned-public.crt}
    env_file:
      # load environment variables from files listed below into Dockerfile and containers
      # @note environment variables in files lower down the list override values from previous files
      # @note variables defined in the service's 'environment' key override values from files
      - .env
    environment:
      WEB_ROOT: /var/www/html/web # override web root to where the ./web folder is mounted
      CORS_ALLOW_HOSTNAMES_PATTERN: ${CORS_ALLOW_HOSTNAMES_PATTERN:-'(localhost|\S*\.ngrok\.io)'}
    volumes:
      - ./web:/var/www/html/web # serve public static files via nginx directly
    init: true # enables improved process management
    networks:
      - craftnet # add service to the internal 'craftnet' network (see 'networks' key below)
    ports:
      - published: '${PUBLIC_PORT_PREFIX}${WEB_PORT:-8443}'
        target: '${WEB_PORT:-8443}'
      - published: '${PUBLIC_PORT_PREFIX}${WEB_PORT_UNSECURE:-8080}'
        target: '${WEB_PORT_UNSECURE:-8080}'
    depends_on:
      - craft-web
    profiles:
      - web
  craft-web: &craft-service
    image: yoannisj/craft:${PHP_VERSION:-7.4}
    build:
      dockerfile: ./services/craft/Dockerfile
      context: .
      args: # expose environment variables as build arguments
      - ENVIRONMENT
      - PHP_VERSION
    env_file:
      - .env
    environment:
      USE_PHP_DOTENV: 0
      DATABASE_HOSTNAME: database
      REDIS_HOSTNAME: redis
    volumes:
      - ./composer.json:/var/www/html/composer.json
      - ./composer.lock:/var/www/html/composer.lock
      - ./craftcms/config:/var/www/html/craftcms/config
      - ./craftcms/modules:/var/www/html/craftcms/modules
      - ./craftcms/storage:/var/www/html/craftcms/storage
      - ./craftcms/templates:/var/www/html/craftcms/templates
      - ./web:/var/www/html/web
    init: true # enables improved process management
    networks:
      - craftnet # add service to the internal 'craftnet' network (see 'networks' key below)
    depends_on:
      - database
      - redis
    command: [ "php-fpm" ]
    profiles:
      - web
  craft-cli:
    <<: *craft-service
    entrypoint: [ "php", "./craft" ]
    command: [ "help" ]
    profiles:
      - cli
  craft-queue:
    <<: *craft-service
    expose:
      - '9001' # expose to internal networks via port 9001
    command: [ "./craft_queue.sh" ]
    profiles:
      - web
      - cli
  database:
    # this service needs to be extended by loading one of the database driver service overrides:
    # - ./services/database/mysql/docker-compose.ovveride.yaml
    # - ./services/database/mariadb/docker-compose.override.yml
    # - ./services/database/postgres/docker-compose.override.yml
    build:
      context: .
      args: # expose environment variables as build arguments
        - ENVIRONMENT
    init: true # enables improved process management
    networks:
      - craftnet # add service to the internal 'craftnet' network (see 'networks' key below)
    profiles:
      - web
      - cli
  redis:
    image: yoannisj/craft-redis:${REDIS_VERSION:-5}
    build:
      dockerfile: ./services/redis/Dockerfile
      context: .
    init: true
    networks:
      - craftnet
    ports:
      - published: '${PUBLIC_PORT_PREFIX}${REDIS_PORT:-6379}'
        target: '${REDIS_PORT:-6379}'
    profiles:
      - web
      - cli
  ngrok:
    image: wernight/ngrok
    env_file:
      - .env
    environment:
      TUNNEL_TARGET_HOST: httpd
      TUNNEL_TARGET_PORT: ${WEB_PORT:-8443}
      NGROK_LOOK_DOMAIN: https://httpd
      NGROK_PORT: ${WEB_PORT:-8443}
      NGROK_PROTOCOL: ${TUNNEL_PROTOCOL:-HTTP}
      NGROK_BINDTLS: ${TUNNEL_BINDTLS:-true}
      NGROK_USERNAME: ${TUNNEL_HTTPAUTH_USERNAME}
      NGROK_PASSWORD: ${TUNNEL_HTTPAUTH_PASSWORD}
      NGROK_DEBUG: ${TUNNEL_DEBUG:-true}
    init: true
    networks:
      - craftnet
    ports:
      - published: '${PUBLIC_PORT_PREFIX}${TUNNEL_PORT:-4040}'
        target: '${TUNNEL_PORT:-4040}'
    depends_on:
      - httpd
    profiles:
      - tunnel
networks:
  # create internal network called 'craftnet' which uses the default network driver 'bridge'
  craftnet: # network used by craft application services
    driver: bridge
