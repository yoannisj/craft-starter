# Env file used by docker-compose for variable substitution in the
# docker-compose.yml file, and to configure the docker compose CLI options
# @see https://docs.docker.com/compose/env-file/
#
# @tip Docker recommends defining ports as strings to avoid issues with
#   service configuration in docker-compose.yml file(s)

# =Docker
# -----------------------------------------------------------------------------
# @see https://docs.docker.com/compose/reference/envvars/

# List of service config files loaded by docker-compose
# (separate files with a ':' character on linux/mac-osx, and ';' on windows)
# @tip: Use `docker-compose config` to see the resulting config that docker-compose
#   will use after merging all files
# @see https://docs.docker.com/compose/extends/
# @see https://docs.docker.com/compose/reference/envvars/#compose_file
#
# @accept {string}
# @default ./docker-compose.yml:./services/mariadb/docker-compose.override.yml

COMPOSE_FILE=./docker-compose.yml:./services/mariadb/docker-compose.override.yml

# Profiles to use when spinning up docker services
# @see https://docs.docker.com/compose/reference/envvars/#compose_profiles
#
# @accept {string}
# @default 'web'

COMPOSE_PROFILES=web

# Suffix added to ports exposed publicly/on the host network
# @note this can be used in development to run multiple docker-compose projects
#   on the same host machine simultaneously
#
# @accepts {string}
# @default (empty)

# PUBLIC_PORT_SUFFIX='0'

# =Craft
# -----------------------------------------------------------------------------

# Hostname on which the web-server is exposed publicly/on the host (http)
#
# @accept {string}
# @default http

WEB_PROTOCOL=http

# Hostname on which the web-server is exposed publicly/on the host (http)
#
# @accept {string}
# @default localhost

WEB_HOSTNAME=localhost

# Port on which the web-server (nginx) is exposed publicly/on the host (http)
# @note This need to be wrapped in quotes for compatibility with docker-compose
#
# @accept {string}
# @default '8080'

WEB_PORT='8080'

# Absolute path to public web folder (where Craft's index.php file lives)
# @see https://craftcms.com/docs/3.x/config/#aliases
# @accept {string} Absolute path
# @default /var/www/html/web

WEB_ROOT=/var/www/html/web

# Name of current environment
#
# @accept {string} development, testing, staging, production, etc.
# @default production

ENVIRONMENT=production

# Security key used by the Craft application to encrypt sensible data
# @warning This should have the same value on ALL of your application environments
# @required

SECURITY_KEY=X8jQPb7wjvSbtNDn4LVwvnPA4S8TKbDQg3PmwyEq6A96QF8A

# Unique identifier string for the Craft application, used as a way to identify
# the application on the web-server and in external services
# @accept {string}
# @default craftcms

APP_ID=craftcms

# Base URL to the upload location for Craft's local asset volumes
# @accept {string} Absolute URL (i.e. starts with protocol or full domain)
# @accept {string} Root-relative URL (i.e. starts with '/')
# @default /uploads

LOCAL_UPLOADS_URL=/uploads

# Path to the upload location for Craft's local asset volumes
# @note The directory at this path must be writable by PHP
#
# @accept {string} Relative directory path (relative to the WEB_ROOT)
# @accept {string} Absolute directory path
# @default ./uploads

LOCAL_UPLOADS_PATH=./uploads

# =Nginx
# -----------------------------------------------------------------------------

# Version of nginx web server
# @note This also determines the base docker image used for the nginx service
#
# @accept {string} Version number
# @default 1.19

NGINX_VERSION=1.19

# Directory (in container) which contains the template files that docker will
# process to support environment variables in nginx config using `envsubst`
# @see https://hub.docker.com/_/nginx
#
# @accept {string}
# @default /etc/nginx/template

NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/template

# The suffix for template files to process in the NGINX_ENVSUBST_TEMPLATE_DIR
#
# @accept {string}
# @default .template

NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template

# =SSL
# -----------------------------------------------------------------------------

# Path to the private SSL key file used to provide local HTTPS for this project
# (typically self-signed or generated with mkcert)
#
# @accept {string}
# @default services/ssl/private.key

LOCAL_SSL_KEY_FILE=services/ssl/private.key

# Path to the public SSL cert file used to provide local HTTPS for this project
# (typically self-signed or generated with mkcert)
#
# @accept {string}
# @default services/ssl/public.crt

LOCAL_SSL_CERT_FILE=services/ssl/public.crt

# Path to CA used to generate the SSL certificate files
# @note: This is passed on the containerized Node.js servers via the
# `NODE_EXTRA_CA_CERTS` environment variable, because Node.js servers don't
# use the system root store
# @note If you used mkcert to generate the SSL certificate files, this should
# most probably be set to the result of `$(mkcert -CAROOT)/rootCA.pem`
# (i.e. run `mkcert -CAROOT` and append `/rootCA.pem`)
#
# @accept {string}
# @default (empty)

# SSL_CA_CERTS

# =Ngrok
# -----------------------------------------------------------------------------

TUNNEL_HOSTNAME=

TUNNEL_PORT=80

# =PHP
# -----------------------------------------------------------------------------

# Version of PHP installed on web server
# @note This also determines the base docker image used for the php services
#
# @accept {string}
# @default 7.4

PHP_VERSION=7.4

# =Database
# -----------------------------------------------------------------------------

# The type of database server to use
# @note The value of this environment variable determines which of the available
#   database services docker-compose will start when running `docker-compose up`
# @note In `craftcms/config/db.php` we set Craft's database 'driver' setting by
#   converting this environment variable's value into either 'mysql' or 'pgsql'
#   which are the two values accepted by Craft.
#
# @accept {string} 'mysql', 'mariadb' or 'postgres'
# @default 'mysql'

DATABASE_DRIVER=mysql

# Version of the database driver installed on the server.
# @note This also determines the base docker image used for the database service
# @note The default value depends on the DATABASE_DRIVER value
#   - mysql: 8.0
#   - mariadb: 10.2
#   - postgres:  13.3

# MYSQL_VERSION=8.0
# MARIADB_VERSION=10.2
# POSTGRES_VERSION=13.3

# Host of the database server the app connects to
# @note This can be ommitted this environment variable in docker environments
# where it will default to the value of DATABASE_DRIVER, which is also the name
# of the corresponding database in the docker-compose.yml file.
#
# @accept {string}
# @default 127.0.0.1

# DATABASE_HOSTNAME='127.0.0.1'

# Port of the database server the app connects to
# @note If left empty, Craft will choose a port based on to the db driver in use
#   - mysql: '3306'
#   - mariadb: '3306'
#   - postgres: '5432'
#
# @accept {string}
# @default (empty)

# DATABASE_PORT='3306'

# Password of root user on the database server
# @note In docker environments, this is passed to the database service
#   to set the root user's password
#
# @accept {string}
# @default secret

# DATABASE_ROOT_PASSWORD=

# Database user used to connect to the database
# @note In docker environments, this is passed to the database service
#   to create the app's database user
#
# @accept {string}
# @default craftcms

# DATABASE_USER=

# Password used to connect to the database
# @note In docker environments, this is passed to the database service
#   to set the app's database user's password
#
# @accept {string}
# @default secret

# DATABASE_PASSWORD=

# Name of app's database
# @note In docker environments, this is passed to the database service
#   to create the app's database
#
# @accept {string}
# @default craftcms

# DATABASE_NAME=

# The schema that Postgres is configured to use by default (PostgreSQL only).
# @see https://www.postgresql.org/docs/current/ddl-schemas.html
#
# @accept {string} 'public' or ''
# @default public

DATABASE_SCHEMA=public

# Prefix for the app's database table names
# @accept {string}
# @default craft_

DATABASE_TABLE_PREFIX=craft_

# =Redis
# -----------------------------------------------------------------------------

# Host name of the redis service connected to the app
# @note in docker environments, this should be the name of the corresponding
# service in the docker-compose.yml file
#
# @accept {string}
# @default redis

REDIS_HOST=redis

# Port of the redis service connected to the app
# @accept {string}
# @default '6379'

REDIS_PORT='6379'

# Password used to connect to redis service
# @note this can be empty if your Redis server is not configured to use passwords
#
# @accept {string}
# @default (empty)

REDIS_PASSWORD=
