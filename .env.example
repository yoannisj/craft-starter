# Env file used by docker-compose for variable substitution in the
# docker-compose.yml file, and to configure the docker compose CLI options
# @see https://docs.docker.com/compose/env-file/
#
# @tip Docker recommends defining ports as strings to avoid issues with
#   service configuration in docker-compose.yml file(s)

# =Docker
# -----------------------------------------------------------------------------
# @see https://docs.docker.com/compose/reference/envvars/

# List of service config files loaded by docker-compose
# (separate files with a ':' character on linux/mac-osx, and ';' on windows)
# @tip: Use `docker-compose config` to see the resulting config that docker-compose
#   will use after merging all files
# @see https://docs.docker.com/compose/extends/
# @see https://docs.docker.com/compose/reference/envvars/#compose_file
#
# @accept {string}
# @default ./docker-compose.yml:./services/database/mariadb/docker-compose.override.yml

COMPOSE_FILE=./docker-compose.yml:./services/database/mariadb/docker-compose.override.yml

# Profiles to use when spinning up docker services
# @see https://docs.docker.com/compose/reference/envvars/#compose_profiles
#
# @accept {string}
# @default 'web'

COMPOSE_PROFILES=web

# Suffix added to ports exposed publicly/on the host network
# @note this can be used in development to run multiple docker-compose projects
#   on the same host machine simultaneously
#
# @accept {string}
# @default ''

PUBLIC_PORT_PREFIX=''

# =Craft
# -----------------------------------------------------------------------------
# Configuration of service providing the Craft CMS application

# Absolute path to public web folder (where Craft's index.php file lives)
# @see https://craftcms.com/docs/3.x/config/#aliases
#
# @accept {string} Absolute path
# @default /var/www/html/web

WEB_ROOT=/var/www/html/web

# Url at which the craft installation is available publicly/on the host machine
#
# @accept {string}
# @default localhost

WEB_HOSTNAME=craftstarter.local

# Secure port on which the web-server is listening publicly/on the host machine (HTTP)
# @note this needs to be wrapped in quotes for compatibility with docker-compose
# @note If you want to connect to docker-compose's httpd service from the
#   host machine, you need to add the `PUBLIC_PORT_PREFIX` to this port
#
# @accept {string}
# @default '8443'

WEB_PORT='8443'

# Unsecure port on which the web-server is listening publicly/on the host machine (HTTP)
# @note This needs to be wrapped in quotes for compatibility with docker-compose
# @note If you want to connect to docker-compose's httpd service from the
#   host machine, you need to add the `PUBLIC_PORT_PREFIX` to this port
#
# @accept {string}
# @default '8080'

WEB_PORT_UNSECURE='8080'

# Regular expression used by web-server to check if CORS origin can be trusted
# @note This will be injected in a regex expression that matches the full host
#   and therefore it needs to be a `|` separated list of host-name PCRE regex
#   patterns wrapped in parenthesis, and matching the allowed origin's hostname.
#
# @accept {regex}
# @default '(localhost|\S*\.ngrok\.io)'

CORS_ALLOW_HOSTNAMES_PATTERN=(localhost|\S*\.ngrok\.io)

# Name of current application environment.
#
# @accept {string} development, testing, staging, production, etc.
# @default production

ENVIRONMENT=development

# Security key used by the Craft application to encrypt sensible data.
# @warning This should have the same value on ALL of your application environments
#
# @required
# @accept {string}

SECURITY_KEY=X8jQPb7wjvSbtNDn4LVwvnPA4S8TKbDQg3PmwyEq6A96QF8A

# Unique identifier string for the Craft application, used as a way to identify
# the application on the web-server and in other services.
#
# @accept {string}
# @default craftcms

APP_ID=craftcms

# Base URL to the upload location for Craft's local asset volumes.
#
# @accept {string} Absolute URL (i.e. starts with protocol or full domain)
# @accept {string} Root-relative URL (i.e. starts with '/')
# @default /uploads

LOCAL_UPLOADS_URL=/uploads

# Path to the upload location for Craft's local asset volumes
# @note The directory at this path must be writable by PHP
#
# @accept {string} Relative directory path (relative to the WEB_ROOT)
# @accept {string} Absolute directory path
# @default ./uploads

LOCAL_UPLOADS_PATH=./uploads

# =Httpd
# -----------------------------------------------------------------------------
# Configuration of service providing the HTTP web server

# Version of nginx web server.
# @note This also determines the base docker image used for the nginx service
#
# @accept {string} Version number
# @default 1.19

NGINX_VERSION=1.19

# Directory (in container) which contains the template files that docker will
# process to support environment variables in nginx config using `envsubst`.
# @see https://hub.docker.com/_/nginx
#
# @accept {string}
# @default /etc/nginx/template

NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates

# The suffix for template files to process in the NGINX_ENVSUBST_TEMPLATE_DIR.
#
# @accept {string}
# @default .template

NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template

# =SSL
# -----------------------------------------------------------------------------

# Path to the private SSL key file used to provide local HTTPS for this project
# (typically self-signed or generated with mkcert).
#
# @required
# @accept {string}
# @default ./services/httpd/ssl/localhost.selfsigned-private.key

LOCAL_SSL_KEY_FILE=./services/httpd/ssl/localhost.selfsigned-private.key

# Path to the public SSL cert file used to provide local HTTPS for this project
# (typically self-signed or generated with mkcert)
#
# @required
# @accept {string}
# @default ./services/httpd/ssl/localhost.selfsigned-public.crt

LOCAL_SSL_CERT_FILE=./services/httpd/ssl/localhost.selfsigned-public.crt

# Path to CA used to generate the SSL certificate files.
# @note: This is passed on the containerized Node.js servers via the
#   `NODE_EXTRA_CA_CERTS` environment variable, because Node.js servers don't
#   use the system root store
# @note If you used mkcert to generate the SSL certificate files, this should
#   most probably be set to the result of `$(mkcert -CAROOT)/rootCA.pem`
#   (i.e. run `mkcert -CAROOT` and append `/rootCA.pem`)
#
# @accept {string}
# @default (empty)

# SSL_CA_CERTS

# =Ngrok
# -----------------------------------------------------------------------------
# @see https://github.com/wernight/docker-ngrok#environment-variables

# Port on which the tunnel service is exposed publicly/to the docker host.
# @note In local development, the port that will be exposed to the host machine
#   will be suffixed by `PUBLIC_PORT_PREFIX`
#
# @accept string|integer
# @default 4040

TUNNEL_PORT=4040

# The transfer protocol used by the tunnel. This can either be
# HTTP or TCP, and it defaults to HTTP if not specified. If set to TCP, Ngrok
# will allocate a port instead of a subdomain and proxy TCP requests directly
# to your development website/application.
#
# @accept {string} HTTP, TLS or TCP
# @default HTTP

TUNNEL_PROTOCOL=HTTP

# Domain name that the tunnel will proxy to. Defaults to `localhost`.
# @note In local development, this will be overriden in order to point to
# docker-compose's httpd service
#
# @accept {string}
# @default localhost

TUNNEL_TARGET_HOST=localhost

# Port that the tunnel will proxy to. This should be the port on which your
# development website or application is exposed. If the website/application is
# not local, than you should also include the hostname or IP address here.
#
# @note In local development, this will be overriden in order to point to
# docker-compose's httpd service.
#
# @accept {string|integer}
# @default 80

TUNNEL_TARGET_PORT=80

# Whether to enable tunnelling only over a HTTP or HTTPS endpoint.
#
# @accept {boolean} `true` to open only the HTTPS tunnelling endpoint
# @accept {boolean} `false` to open only the HTTP tunnelling endpoint
# @default true

TUNNEL_BINDTLS=true

# Username to use for HTTP authentication on the tunnel.
# @note This restricts access to the ngrok tunnel with HTTP authentication,
#   and must not be confused with the password of the Ngrok account
# @note This being a premium Ngrok feature, you must also provide your
#   authentication token (see `NGROK_AUTH` below)
#
# @accept {sring}
# @default ''

TUNNEL_HTTPAUTH_USERNAME=

# Password to use for HTTP authentication on the tunnel.
# @note This restricts access to the ngrok tunnel with HTTP authentication,
#   and must not be confused with the password of the  account
# @note This being a premium Ngrok feature, you must also provide your
#   authentication token (see `NGROK_AUTH` below)
#
# @accept {sring}
# @default ''

TUNNEL_HTTPAUTH_PASSWORD=

# Whether to output debugging logs to stdout
#
# @accept {boolean}
# @default true

TUNNEL_DEBUG=true
# NGROK_DEBUG=true

# Location of the ngrok tunnel server. This can be:
# - us (United States) [default]
# - eu (Europe)
# - ap (Asia/Pacific)
# - au (Australia)
#
# @accept {string}
# @default us

NGROK_REGION=eu

# Authentication token for your Ngrok account. This is needed to use
# HTTP authentication, custom (sub)domains, and/or a remote TCP address.
#
# @accept {string}
# @default empty

NGROK_AUTH=

# Custom subdomain to use for the Ngrok tunnel (leave out [.region].ngrok.io)
# @note This being a premium Ngrok feature, you must also provide your
#   authentication token (see `NGROK_AUTH` above)
#
# @accept {string}
# @dedault (empty)

NGROK_SUBDOMAIN=

# Custom domain to use for the Ngrok tunnel
# @note If a custom *subdomain* is also specified, the custom *domain* will take
#   precedence and the custom subdomain will not work.
# @note This being a premium Ngrok feature, you must also provide your
#   authentication token (see `NGROK_AUTH` above)
#
# @accept {string}
# @default (empty)

# NGROK_HOSTNAME=

# Name of the reserved TCP address to use for a TCP tunnel.
# @note This being a premium Ngrok feature, you must also provide your
#   authentication token (see `NGROK_AUTH` above)
#
# @accept {string}
# @default (empty)

# NGROK_REMOTE_ADDR=

# =PHP
# -----------------------------------------------------------------------------

# Version of PHP installed on web server.
# @note This also determines the base docker image used for the php services
#
# @accept {string}
# @default 7.4

PHP_VERSION=7.4

# =Database
# -----------------------------------------------------------------------------

# The type of database server to use.
# @note The value of this environment variable determines which of the available
#   database services docker-compose will start when running `docker-compose up`
# @note In `craftcms/config/db.php` we set Craft's database 'driver' setting by
#   converting this environment variable's value into either 'mysql' or 'pgsql'
#   which are the two values accepted by Craft.
#
# @accept {string} 'mysql', 'mariadb' or 'postgres'
# @default 'mysql'

DATABASE_DRIVER=mysql

# Version of the database driver installed on the server.
# @note This also determines the base docker image used for the database service
# @note The default value depends on the DATABASE_DRIVER value
#   - mysql: 8.0
#   - mariadb: 10.2
#   - postgres:  13.3

# MYSQL_VERSION=8.0
# MARIADB_VERSION=10.2
# POSTGRES_VERSION=13.3

# Hostname of the database server the app connects to.
# @note In local development, this will be overriden to point to
#   docker-compose's `database` service
#
# @accept {string}
# @default localhost

DATABASE_HOSTNAME=localhost

# Port of the database server the app connects to.
# @note If left empty, Craft will choose a port based on to the db driver in use
#   - mysql: '3306'
#   - mariadb: '3306'
#   - postgres: '5432'
# @note If you want to connect to docker-compose's Database service from the
#   host machine, you need to add the `PUBLIC_PORT_PREFIX` to this port
#
# @accept {string}
# @default (empty)

# DATABASE_PORT='3306'

# Password of root user on the database server.
# @note In docker environments, this is passed to the database service
#   to set the root user's password
# @note If you ever change this during the project's lifetime, you will
#   need to delete the project's database volume which is named as follows:
    `{COMPOSE_PROJECT}_{DATABASE_DRIVER}_dbdata`
#
# @accept {string}
# @default secret

DATABASE_ROOT_PASSWORD=secret

# Database user used to connect to the database.
# @note In docker environments, this is passed to the database service
#   to create the app's database user
# @note If you ever change this during the project's lifetime, you will
#   need to delete the project's database volume which is named as follows:
    `{COMPOSE_PROJECT}_{DATABASE_DRIVER}_dbdata`
#
# @accept {string}
# @default craftcms

DATABASE_USER=craftcms

# Password used to connect to the database.
# @note In docker environments, this is passed to the database service
#   to set the app's database user's password
# @note If you ever change this during the project's lifetime, you will
#   need to delete the project's database volume which is named as follows:
    `{COMPOSE_PROJECT}_{DATABASE_DRIVER}_dbdata`
#
# @accept {string}
# @default secret

DATABASE_PASSWORD=secret

# Name of database used to store the Craft app's data/content
# @note In docker environments, this is passed to the database service
#   to create the app's database
#
# @accept {string}
# @default craftcms

DATABASE_NAME=craftcms

# The schema that Postgres is configured to use by default (PostgreSQL only).
# @see https://www.postgresql.org/docs/current/ddl-schemas.html
# @note This is irrelevant if DATABASE_DRIVER is not set to 'postgres'
#
# @accept {string} 'public' or ''
# @default public

DATABASE_SCHEMA=public

# Prefix for the Craft app's database table names
#
# @accept {string}
# @default craft_

DATABASE_TABLE_PREFIX=craft_

# =Redis
# -----------------------------------------------------------------------------

# Host name of the redis service connected to the app.
# @note in local development, this will be overridden to point to the
#   name of docker-compose's Redis service
#
# @accept {string}
# @default localhost

REDIS_HOST=localhost

# Port of the redis service connected to the app.
# @note If you want to connect to docker-compose's Redis service from the
#   host machine, you need to add the `PUBLIC_PORT_PREFIX` to this port
#
# @accept {string}
# @default '6379'

REDIS_PORT='6379'

# Password used to connect to redis service
# @note this can be empty if your Redis server is not configured to use passwords
#
# @accept {string}
# @default (empty)

REDIS_PASSWORD=
